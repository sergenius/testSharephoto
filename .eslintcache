[{"/Users/serbel/ml/ab3/cognito-demo/postagram/src/index.js":"1","/Users/serbel/ml/ab3/cognito-demo/postagram/src/App.js":"2","/Users/serbel/ml/ab3/cognito-demo/postagram/src/aws-exports.js":"3","/Users/serbel/ml/ab3/cognito-demo/postagram/src/reportWebVitals.js":"4","/Users/serbel/ml/ab3/cognito-demo/postagram/src/graphql/queries.js":"5","/Users/serbel/ml/ab3/cognito-demo/postagram/src/Posts.js":"6","/Users/serbel/ml/ab3/cognito-demo/postagram/src/Header.js":"7","/Users/serbel/ml/ab3/cognito-demo/postagram/src/Post.js":"8","/Users/serbel/ml/ab3/cognito-demo/postagram/src/Button.js":"9","/Users/serbel/ml/ab3/cognito-demo/postagram/src/CreatePost.js":"10","/Users/serbel/ml/ab3/cognito-demo/postagram/src/graphql/mutations.js":"11"},{"size":595,"mtime":1610569847683,"results":"12","hashOfConfig":"13"},{"size":2326,"mtime":1610576474394,"results":"14","hashOfConfig":"13"},{"size":872,"mtime":1610572527152,"results":"15","hashOfConfig":"13"},{"size":362,"mtime":1610568329941,"results":"16","hashOfConfig":"13"},{"size":654,"mtime":1610569529605,"results":"17","hashOfConfig":"13"},{"size":916,"mtime":1610576603556,"results":"18","hashOfConfig":"13"},{"size":576,"mtime":1610576579855,"results":"19","hashOfConfig":"13"},{"size":1341,"mtime":1610576595803,"results":"20","hashOfConfig":"13"},{"size":543,"mtime":1610576546787,"results":"21","hashOfConfig":"13"},{"size":3579,"mtime":1610576557360,"results":"22","hashOfConfig":"13"},{"size":997,"mtime":1610569529650,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1oc8rvv",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/serbel/ml/ab3/cognito-demo/postagram/src/index.js",[],["50","51"],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/App.js",["52","53"],"import React, { useState, useEffect } from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport { css } from '@emotion/css';\nimport { API, Storage, Auth } from 'aws-amplify';\nimport { listPosts } from './graphql/queries';\n\nimport Posts from './Posts';\nimport Post from './Post';\nimport Header from './Header';\nimport CreatePost from './CreatePost';\nimport Button from './Button';\n\nfunction Router() {\n  /* create a couple of pieces of initial state */\n  const [showOverlay, updateOverlayVisibility] = useState(false);\n  const [posts, updatePosts] = useState([]);\n\n  /* fetch posts when component loads */\n  useEffect(() => {\n      fetchPosts();\n  }, []);\n  async function fetchPosts() {\n    /* query the API, ask for 100 items */\n    let postData = await API.graphql({ query: listPosts, variables: { limit: 100 }});\n    let postsArray = postData.data.listPosts.items;\n    /* map over the image keys in the posts array, get signed image URLs for each image */\n    postsArray = await Promise.all(postsArray.map(async post => {\n      const imageKey = await Storage.get(post.image);\n      post.image = imageKey;\n      return post;\n    }));\n    /* update the posts array in the local state */\n    setPostState(postsArray);\n  }\n  async function setPostState(postsArray) {\n    updatePosts(postsArray);\n  }\n  return (\n    <>\n      <HashRouter>\n          <div className={contentStyle}>\n            <Header />\n            <hr className={dividerStyle} />\n            <Button title=\"New Post\" onClick={() => updateOverlayVisibility(true)} />\n            <Switch>\n              <Route exact path=\"/\" >\n                <Posts posts={posts} />\n              </Route>\n              <Route path=\"/post/:id\" >\n                <Post />\n              </Route>\n            </Switch>\n          </div>\n          <AmplifySignOut />\n        </HashRouter>\n        { showOverlay && (\n          <CreatePost\n            updateOverlayVisibility={updateOverlayVisibility}\n            updatePosts={setPostState}\n            posts={posts}\n          />\n        )}\n    </>\n  );\n}\n\nconst dividerStyle = css`\n  margin-top: 15px;\n`\n\nconst contentStyle = css`\n  min-height: calc(100vh - 45px);\n  padding: 0px 40px;\n`\n\nexport default withAuthenticator(Router);","/Users/serbel/ml/ab3/cognito-demo/postagram/src/aws-exports.js",[],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/reportWebVitals.js",[],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/graphql/queries.js",[],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/Posts.js",[],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/Header.js",[],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/Post.js",["54"],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/Button.js",[],"/Users/serbel/ml/ab3/cognito-demo/postagram/src/CreatePost.js",["55"],"import React, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport Button from './Button';\nimport { v4 as uuid } from 'uuid';\nimport { Storage, API, Auth } from 'aws-amplify';\nimport { createPost } from './graphql/mutations';\n\n/* Initial state to hold form input, saving state */\nconst initialState = {\n  name: '',\n  description: '',\n  image: {},\n  file: '',\n  location: '',\n  saving: false\n};\n\nexport default function CreatePost({\n  updateOverlayVisibility, updatePosts, posts\n}) {\n  /* 1. Create local state with useState hook */\n  const [formState, updateFormState] = useState(initialState)\n\n  /* 2. onChangeText handler updates the form state when a user types into a form field */\n  function onChangeText(e) {\n    e.persist();\n    updateFormState(currentState => ({ ...currentState, [e.target.name]: e.target.value }));\n  }\n\n  /* 3. onChangeFile handler will be fired when a user uploads a file  */\n  function onChangeFile(e) {\n    e.persist();\n    if (! e.target.files[0]) return;\n    const image = { fileInfo: e.target.files[0], name: `${e.target.files[0].name}_${uuid()}`}\n    updateFormState(currentState => ({ ...currentState, file: URL.createObjectURL(e.target.files[0]), image }))\n  }\n\n  /* 4. Save the post  */\n  async function save() {\n    try {\n      const { name, description, location, image } = formState;\n      if (!name || !description || !location || !image.name) return;\n      updateFormState(currentState => ({ ...currentState, saving: true }));\n      const postId = uuid();\n      const postInfo = { name, description, location, image: formState.image.name, id: postId };\n\n      await Storage.put(formState.image.name, formState.image.fileInfo);\n      await API.graphql({\n        query: createPost, variables: { input: postInfo }\n      });\n      updatePosts([...posts, { ...postInfo, image: formState.file }]);\n      updateFormState(currentState => ({ ...currentState, saving: false }));\n      updateOverlayVisibility(false);\n    } catch (err) {\n      console.log('error: ', err);\n    }\n  }\n\n  return (\n    <div className={containerStyle}>\n      <input\n        placeholder=\"Post name\"\n        name=\"name\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input\n        placeholder=\"Location\"\n        name=\"location\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input\n        placeholder=\"Description\"\n        name=\"description\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input \n        type=\"file\"\n        onChange={onChangeFile}\n      />\n      { formState.file && <img className={imageStyle} alt=\"preview\" src={formState.file} /> }\n      <Button title=\"Create New Post\" onClick={save} />\n      <Button type=\"cancel\" title=\"Cancel\" onClick={() => updateOverlayVisibility(false)} />\n      { formState.saving && <p className={savingMessageStyle}>Saving post...</p> }\n    </div>\n  )\n}\n\nconst inputStyle = css`\n  margin-bottom: 10px;\n  outline: none;\n  padding: 7px;\n  border: 1px solid #ddd;\n  font-size: 16px;\n  border-radius: 4px;\n`\n\nconst imageStyle = css`\n  height: 120px;\n  margin: 10px 0px;\n  object-fit: contain;\n`\n\nconst containerStyle = css`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  height: 420px;\n  position: fixed;\n  left: 0;\n  border-radius: 4px;\n  top: 0;\n  margin-left: calc(50vw - 220px);\n  margin-top: calc(50vh - 230px);\n  background-color: white;\n  border: 1px solid #ddd;\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 0.125rem 0.25rem;\n  padding: 20px;\n`\n\nconst savingMessageStyle = css`\n  margin-bottom: 0px;\n`\n","/Users/serbel/ml/ab3/cognito-demo/postagram/src/graphql/mutations.js",[],["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":9,"column":24,"nodeType":"64","messageId":"65","endLine":9,"endColumn":28},{"ruleId":"66","severity":1,"message":"67","line":26,"column":6,"nodeType":"68","endLine":26,"endColumn":8,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":13,"column":6,"nodeType":"68","endLine":13,"endColumn":8,"suggestions":"71"},{"ruleId":"62","severity":1,"message":"63","line":5,"column":24,"nodeType":"64","messageId":"65","endLine":5,"endColumn":28},{"ruleId":"58","replacedBy":"72"},{"ruleId":"60","replacedBy":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.",["77"],["74"],["75"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [fetchPosts]",{"range":"82","text":"83"},"Update the dependencies array to be: [fetchPost]",{"range":"84","text":"85"},[756,758],"[fetchPosts]",[422,424],"[fetchPost]"]